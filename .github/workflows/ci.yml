name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, json, xml, gd, zip, intl, bcmath
          tools: composer:v2

      - name: Get Composer cache directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies (no dev, prefer dist)
        run: |
          if [ -f "src/drupal/web/composer.json" ]; then pushd src/drupal/web; fi
          composer install --no-interaction --prefer-dist --no-progress
          if [ -f "composer.json" ] && [ -d vendor ]; then echo "Composer vendor installed"; fi
          if [ -f "composer.json" ] && [ -d vendor ]; then popd || true; fi

      - name: Validate Composer files (root if any)
        run: |
          if [ -f composer.json ]; then composer validate --no-check-publish; fi

      - name: Validate Drupal composer (src/drupal/web)
        run: |
          if [ -f src/drupal/web/composer.json ]; then (cd src/drupal/web && composer validate --no-check-publish); fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (optional)
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build images
        run: |
          docker build -t ci-cd-drupal-demo-php:ci ./app/php
          docker build -t ci-cd-drupal-demo-nginx:ci ./app/nginx
          docker build -t ci-cd-drupal-demo-phpmyadmin:ci ./app/phpmyadmin || echo "phpmyadmin not present or build failed, continuing"

      - name: Push images (optional when logged in)
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
        run: |
          docker tag ci-cd-drupal-demo-php:ci ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-drupal-demo-php:ci
          docker tag ci-cd-drupal-demo-nginx:ci ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-drupal-demo-nginx:ci
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-drupal-demo-php:ci
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-drupal-demo-nginx:ci

      - name: Archive project as artifact
        run: |
          zip -r project.zip . -x "**/.git/**"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-archive
          path: project.zip


