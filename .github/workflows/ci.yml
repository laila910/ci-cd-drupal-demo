name: CI/CD to Azure

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

env:
  REGISTRY: yournameacr.azurecr.io
  IMAGE_NAME_PHP: ci-cd-drupal-demo-php
  IMAGE_NAME_NGINX: ci-cd-drupal-demo-nginx
  IMAGE_NAME_PHPMYADMIN: ci-cd-drupal-demo-phpmyadmin

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, json, xml, gd, zip, intl, bcmath
          tools: composer:v2

      - name: Get Composer cache directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: |
          if [ -f "src/drupal/web/composer.json" ]; then pushd src/drupal/web; fi
          composer install --no-interaction --prefer-dist --no-progress
          if [ -f "composer.json" ] && [ -d vendor ]; then echo "Composer vendor installed"; fi
          if [ -f "composer.json" ] && [ -d vendor ]; then popd || true; fi

      - name: Validate Composer files
        run: |
          if [ -f composer.json ]; then composer validate --no-check-publish; fi
          if [ -f src/drupal/web/composer.json ]; then (cd src/drupal/web && composer validate --no-check-publish); fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push PHP image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PHP }}:${{ github.sha }} ./app/php
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PHP }}:${{ github.sha }}

      - name: Build and push Nginx image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_NGINX }}:${{ github.sha }} ./app/nginx
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_NGINX }}:${{ github.sha }}

      - name: Build and push phpMyAdmin image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PHPMYADMIN }}:${{ github.sha }} ./app/phpmyadmin || echo "phpmyadmin build failed, continuing"
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PHPMYADMIN }}:${{ github.sha }} || echo "phpmyadmin push failed, continuing"

      - name: Archive project
        run: |
          zip -r project.zip . -x "**/.git/**"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-archive
          path: project.zip

  deploy-azure:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Instances
        run: |
          # Create resource group if it doesn't exist
          az group create --name ci-cd-drupal-rg --location eastus --output none || true
          
          # Deploy PHP container
          az container create \
            --resource-group ci-cd-drupal-rg \
            --name drupal-php \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PHP }}:${{ github.sha }} \
            --cpu 1 \
            --memory 1 \
            --ports 9000 \
            --environment-variables MYSQL_HOST=drupal-db MYSQL_DATABASE=drupal MYSQL_USER=drupal MYSQL_PASSWORD=drupal_password \
            --output none || true

          # Deploy Nginx container
          az container create \
            --resource-group ci-cd-drupal-rg \
            --name drupal-nginx \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_NGINX }}:${{ github.sha }} \
            --cpu 1 \
            --memory 1 \
            --ports 80 \
            --environment-variables PHP_HOST=drupal-php \
            --output none || true

          # Deploy MySQL (using Azure Database for MySQL)
          az mysql flexible-server create \
            --resource-group ci-cd-drupal-rg \
            --name drupal-mysql \
            --admin-user drupal \
            --admin-password ${{ secrets.MYSQL_PASSWORD }} \
            --sku-name Standard_B1ms \
            --tier Burstable \
            --storage-size 20 \
            --output none || true

      - name: Get deployment info
        run: |
          echo "Deployment completed!"
          echo "Resource Group: ci-cd-drupal-rg"
          echo "Check Azure Portal for container status"


